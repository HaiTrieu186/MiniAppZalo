// src/components/admin/AddEditService.tsx
import React, { useState, useEffect, FormEvent } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { ChevronLeft, Save } from "lucide-react";
import { Switch } from "@/components/ui/switch"; // Assuming you use shadcn/ui Switch

// Interface from ServiceManagement (you might want to move this to a shared types file)
interface ServiceData {
  id: string;
  name: string;
  description: string;
  priceRange?: string;
  imageUrl?: string;
  isActive: boolean;
}

// Mock data import (temporary, for editing simulation)
// In a real app, you'd fetch data via API
const mockServices: ServiceData[] = [
  {
    id: "sv001",
    name: "Sửa xe tổng quát",
    description: "Kiểm tra và sửa chữa các lỗi thông thường.",
    priceRange: "Liên hệ",
    isActive: true,
  },
  {
    id: "sv002",
    name: "Thay dầu nhớt",
    description: "Thay dầu động cơ, hộp số.",
    priceRange: "Từ 300.000đ",
    isActive: true,
  },
  {
    id: "sv003",
    name: "Rửa xe cơ bản",
    description: "Rửa thân vỏ, hút bụi.",
    priceRange: "Từ 50.000đ",
    isActive: true,
  },
  {
    id: "sv004",
    name: "Bảo dưỡng định kỳ",
    description: "Kiểm tra theo km.",
    priceRange: "Từ 500.000đ",
    isActive: false,
  },
];

const AddEditService: React.FC = () => {
  const navigate = useNavigate();
  const { serviceId } = useParams<{ serviceId?: string }>();
  const isEditing = !!serviceId;

  // State for form fields
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [priceRange, setPriceRange] = useState("");
  const [isActive, setIsActive] = useState(true); // Default to active for new services
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Load data if editing (using mock data for now)
  useEffect(() => {
    if (isEditing && serviceId) {
      // TODO: Fetch service data by serviceId from API in real app
      const serviceToEdit = mockServices.find((s) => s.id === serviceId);
      if (serviceToEdit) {
        setName(serviceToEdit.name);
        setDescription(serviceToEdit.description);
        setPriceRange(serviceToEdit.priceRange || "");
        setIsActive(serviceToEdit.isActive);
      } else {
        alert("Không tìm thấy dịch vụ.");
        navigate("/admin/services");
      }
    }
  }, [isEditing, serviceId, navigate]);

  const handleSubmit = (event: FormEvent) => {
    event.preventDefault();
    setError(null);

    // Basic validation
    if (!name || !description) {
      setError("Vui lòng điền đầy đủ Tên dịch vụ và Mô tả.");
      return;
    }

    setIsLoading(true);

    const serviceData: Omit<ServiceData, "id"> & { id?: string } = {
      name: name.trim(),
      description: description.trim(),
      priceRange: priceRange.trim() || undefined, // Set to undefined if empty
      isActive: isActive,
    };

    if (isEditing && serviceId) {
      serviceData.id = serviceId; // Include ID for update
      console.log("Cập nhật dịch vụ:", serviceData);
    } else {
      console.log("Thêm dịch vụ mới:", serviceData);
      // In a real app, the ID would likely be generated by the backend
      // serviceData.id = `sv_${Date.now()}`;
    }

    // --- TODO: Call API to add/edit service ---
    // try {
    //   if (isEditing && serviceId) {
    //     await api.updateService(serviceId, serviceData);
    //     alert("Cập nhật dịch vụ thành công!");
    //   } else {
    //     await api.addService(serviceData);
    //     alert("Thêm dịch vụ thành công!");
    //   }
    //   navigate("/admin/services"); // Go back to the list
    // } catch (apiError: any) {
    //   setError(apiError.message || "Đã xảy ra lỗi khi lưu.");
    // } finally {
    //   setIsLoading(false);
    // }
    // --- Simulate success ---
    setTimeout(() => {
      setIsLoading(false);
      alert(
        isEditing
          ? "Đã cập nhật dịch vụ (giả lập)"
          : "Đã thêm dịch vụ (giả lập)"
      );
      navigate("/admin/services");
    }, 1000);
  };

  const goBack = () => {
    navigate(-1); // Go back to the previous page
  };

  return (
    <div className="max-w-xl mx-auto">
      {/* Simple Header */}
      <div className="flex items-center p-4 border-b bg-white sticky top-0 z-10 mb-6">
        <button onClick={goBack} className="p-1 mr-2 -ml-1 text-gray-600">
          <ChevronLeft size={25} />
        </button>
        <h2 className="text-xl font-semibold text-center flex-1 text-gray-800">
          {isEditing ? "Sửa thông tin dịch vụ" : "Thêm dịch vụ mới"}
        </h2>
        <div className="w-8"></div> {/* Placeholder */}
      </div>

      {/* Form */}
      <form onSubmit={handleSubmit} className="space-y-4 px-4 pb-6">
        {/* Service Name */}
        <div>
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Tên dịch vụ <span className="text-red-500">*</span>
          </label>
          <input
            id="name"
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-300 focus:border-transparent text-sm"
          />
        </div>

        {/* Description */}
        <div>
          <label
            htmlFor="description"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Mô tả <span className="text-red-500">*</span>
          </label>
          <textarea
            id="description"
            rows={3}
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            required
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-300 focus:border-transparent text-sm resize-none"
          />
        </div>

        {/* Price Range */}
        <div>
          <label
            htmlFor="priceRange"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Giá (Ví dụ: Từ 500.000đ, Liên hệ)
          </label>
          <input
            id="priceRange"
            type="text"
            value={priceRange}
            onChange={(e) => setPriceRange(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-300 focus:border-transparent text-sm"
          />
        </div>

        {/* Status (Active/Inactive) */}
        <div className="flex items-center justify-between pt-2">
          <label
            htmlFor="isActive"
            className="text-sm font-medium text-gray-700"
          >
            Trạng thái hoạt động
          </label>
          <Switch
            id="isActive"
            checked={isActive}
            onCheckedChange={setIsActive}
            className="data-[state=checked]:bg-orange-400"
          />
        </div>

        {/* Error Display */}
        {error && <p className="text-red-500 text-sm text-center">{error}</p>}

        {/* Save Button */}
        <div className="pt-4">
          <button
            type="submit"
            disabled={isLoading}
            className="w-full flex items-center justify-center gap-1.5 px-4 py-2.5 bg-orange-400 hover:bg-orange-500 text-white rounded-lg font-medium text-sm transition-colors duration-150 whitespace-nowrap disabled:opacity-70 disabled:cursor-not-allowed"
          >
            {isLoading ? (
              "Đang lưu..."
            ) : (
              <>
                <Save size={16} />
                {isEditing ? "Lưu thay đổi" : "Thêm dịch vụ"}
              </>
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default AddEditService;
